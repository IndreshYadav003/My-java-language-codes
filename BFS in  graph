import java.util.*;
public class bFSINGRAPH2 {

//create edge for graph
        static class Edge {
            int src;
            int dest;

            public Edge(int src, int dest) {
                this.src = src;
                this.dest = dest;
            }
        }
// create grapg
        public static void creategraph(ArrayList<Edge> graph[]) {
            for (int i = 0; i < graph.length; i++) {
                graph[i] = new ArrayList<Edge>();
            }
//part first of graph
            graph[0].add(new Edge(0, 1));
            graph[0].add(new Edge(0, 2));
            graph[1].add(new Edge(1, 0));
            graph[2].add(new Edge(2, 0));
//part second of graph
            graph[3].add(new Edge (3, 4));
            graph[3].add(new Edge(3, 5));
            graph[4].add(new Edge(4, 5));
;           graph[5].add(new Edge(5, 4));
            graph[5].add(new Edge(5, 6));
            graph[6].add(new Edge(6, 5));
        }

//bfs terversal in the graph
    public  static  void  bfs(ArrayList<Edge>graph[],int v,boolean []visit,int start){
            Queue<Integer>q=new LinkedList<>();
            q.add(start);
            while(!q.isEmpty()){
                int curr=q.remove();
                if(visit[curr]==false){
                    System.out.print(curr+" ");
                    visit[curr]=true;
                    for (int i=0;i<graph[curr].size();i++){
                        Edge e=graph[curr].get(i);
                        q.add(e.dest);
                    }
                }
            }
    }
        public static void main(String[] args) {
            int v=7;
            ArrayList<Edge>graph[]=new ArrayList[v];
            creategraph(graph);
         boolean visit[]=new boolean[v];
         for(int i=0;i<v;i++){
             if(visit[i]==false){
                 bfs(graph,v,visit,i);
             }
         }
            System.out.println();

        }

    }





import java.util.*;
public class boundaryoftree {
    public static class Node{
        int val;
        Node left;
        Node right;
        public Node(int val){
            this.val=val;
            this.left=left;
            this.right=right;
        }
    }
// height of tree
    public static int height(Node root) {
        if (root == null || (root.left == null && root.right == null)) return 0;
        return 1 + Math.max(height(root.left) , height(root.right));
    }
    //level wise terversal
    public static void nthlevel(Node root,int n){
        if(root==null)return;
        if(n==1){
            System.out.print(root.val+" ");
        return;
        }
        nthlevel(root.left,n-1);
        nthlevel(root.right,n-1);
    }
    public  static Node contrucbfs(String[]arr){
        int x=Integer.parseInt(arr[0]);
        int n= arr.length;
        Node root=new Node(x);
        Queue<Node>q=new LinkedList<>();
       q.add(root);
        int i=1;
        while(i<n-1){
            Node temp =q.remove();
            Node left=new Node(18);
            Node right=new Node(100);
           if(arr[i].equals("")) left = null;
           else {
               int l= Integer.parseInt(arr[i]);
               left.val=l;
               q.add(left);
           }
            if(arr[i+1].equals("")) right = null;
            else {
                int r= Integer.parseInt(arr[i+1]);
                right.val=r;
                q.add(right);
            }
            temp.left=left;
            temp.right=right;
         i+=2;
        }
        return root;
    }
    private static void boundaryDisplay(Node root){
        LeftBoundaryDisplay(root);
        BottomBoundary(root);
        RightBoundary(root);
    }
    private static void RightBoundary(Node root){
        if(root==null)return;
        if(root.left==null && root.right==null) return;
        if(root.right!=null)RightBoundary(root.right);
        else RightBoundary(root.left);
        System.out.print(root.val+" ");
    }
    private static void BottomBoundary(Node root) {
        if (root == null) return;
        if (root.left == null && root.right == null) {
            System.out.print(root.val + " ");
            return;

        }
        BottomBoundary(root.left);
        BottomBoundary(root.right);

    }
    private static void LeftBoundaryDisplay(Node root){
        if(root==null)return ;
        if(root.left==null&& root.right==null) return;
        System.out.print(root.val+" ");
        if(root.left!=null)LeftBoundaryDisplay(root.left);
        else LeftBoundaryDisplay(root.right);

    }
    public static void main(String[] args) {
        String[]arr={"1","2","3","4","5","","6","","7","","8","9","10","","11","","12","","13","","14","15","16","","17","","","18","","19","","","","20","21","22","23","24","25","26","27"};
        Node root=contrucbfs(arr);
        int level=height(root)+1;
        System.out.println("left boundary");
            LeftBoundaryDisplay(root);
        System.out.println("bottom boundary");
                BottomBoundary(root);
        System.out.println("right boundary");
        RightBoundary(root.right);
      System.out.println();
        }

}
//out put of my code
//        \tree boundaryoftree
//        left boundary
//        1 2 4 7 11 15 19 bottom boundary
//        24 25 16 26 27 21 13 22 23 right boundary
//        18 14 10 6 3 

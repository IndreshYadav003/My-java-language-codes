package HashMap;
import java.util.*;
public class implementationOfHashMap {
 static class MyHashMap<K,V> {
     public static final int DEFAULT_CAPACITY = 4;
     public static final float DEFAULT_LOAD_FACTOR = 0.75f;
     private class Node {
         K key;
         V value;
         Node(K key, V value) {
             this.key = key;
             this.value = value;
         }
     }
     int n;//the number of entries in map
     private LinkedList<Node>[] buckets;

     private void intiBuckets(int N) {//N-capacity/size of buckets array
         buckets = new LinkedList[N];
         for (int i = 0; i < buckets.length; i++) {
             buckets[i] = new LinkedList<>();
         }
     }

     private int HashFunc(K key) {
         int hc = key.hashCode();
         return (Math.abs(hc)) % buckets.length;
     }

     //traverse the ll and looks a node with key,if found it return its index otherwise it return null;
     private int searchInBucket(LinkedList<Node> ll, K key) {
         for (int i = 0; i < ll.size(); i++) {
             if (ll.get(i).key == key) {
                 return i;
             }
         }
         return -1;
     }

     private MyHashMap() {
         intiBuckets(DEFAULT_CAPACITY);
     }
public int capacity(){
         return buckets.length;
}
public float load(){
         return (n*1.0f)/buckets.length;
}
     public int size() {//return the number of entries in map
         return n;
     }
     private void rehash(){
         LinkedList<Node>[]oldBuckets=buckets;
         intiBuckets(oldBuckets.length*2);
         n=0;
         for (var bucket:oldBuckets){
     for(var node:bucket){
             put(node.key,node.value);
       }
         }
    }
     public void put(K key, V value) {
         int bi = HashFunc(key);
         LinkedList<Node> currBucket = buckets[bi];
         int ei = searchInBucket(currBucket, key);
         if (ei == -1) {//key doesnt have to insert a new node;
             Node node = new Node(key, value);
             currBucket.add(node);
             n++;

         } else {//update case
             Node currNode = currBucket.get(ei);

             currNode.value = value;
         }if (n>=buckets.length*DEFAULT_LOAD_FACTOR){
            rehash();
         }

     }
     public V get(K key) {
         int bi = HashFunc(key);
         LinkedList<Node> currBucket = buckets[bi];
         int ei = searchInBucket(currBucket, key);
         if (ei != -1) {
             Node currNode = currBucket.get(ei);
             return currNode.value;
         }
         return null;
     }
     public V remove(K key) {
         int bi = HashFunc(key);
         LinkedList<Node> currBucket = buckets[bi];
         int ei = searchInBucket(currBucket, key);
         if (ei != -1) {
             Node currNode = currBucket.get(ei);
             V val = currNode.value;
             currBucket.remove(ei);
             n--;
             return val;
         }
         return null;//key does not exist;
     }
 }
    public static void main(String[] args) {
     MyHashMap<String,Integer>mp=new MyHashMap<String, Integer>();
        System.out.println("test put");
        mp.put("a",4);
        mp.put("b",3);
        mp.put("c",23);
        System.out.println("Capacity"+mp.capacity());
        System.out.println("Load"+mp.load());
        mp.put("d",2098);
        System.out.println("Capacity"+mp.capacity());
        System.out.println("Load"+mp.load());
        System.out.println("After 4 element add size");
        System.out.println("test size"+mp.size());
        mp.put("f",2098);
        mp.put("h",2098);
        mp.put("g",2098);
        System.out.println("test size"+mp.size());
        mp.remove("e");
        System.out.println("test size"+mp.size());
        System.out.println(mp.get("a"));
        System.out.println(mp.get("b"));
        System.out.println(mp.get("c"));
        System.out.println(mp.get("d"));
        System.out.println("Capacity"+mp.capacity());
        System.out.println("Load"+mp.load());
 }
}
//out put of my code
//test put
//Capacity8
        //Load0.375
        //Capacity8
       // Load0.5
       // After 4 element add size
       // test size4
       // test size7
       // test size7
       // 4
       // 3
       // 23
      //  2098
    //    Capacity16
  //      Load0.4375

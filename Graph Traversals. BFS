import java.util.LinkedList;
import java.util.Queue;
public class GraphTraversal {
private int vertices;
private LinkedList<Integer>[]adjacencyList;

    public GraphTraversal(int vertices) {
        this.vertices = vertices;
        adjacencyList = new LinkedList[vertices];

        for (int i = 0; i < vertices; ++i) {
            adjacencyList[i] = new LinkedList<>();
        }
    }

    public void addEdge(int v, int w) {
        adjacencyList[v].add(w);
    }

    public void bfs(int startVertex) {
        boolean[] visited = new boolean[vertices];

        Queue<Integer> queue = new LinkedList<>();
        visited[startVertex] = true;
        queue.add(startVertex);

        while (!queue.isEmpty()) {
            int currentVertex = queue.poll();
            System.out.print(currentVertex + " ");

            for (int neighbor : adjacencyList[currentVertex]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.add(neighbor);
                }
            }
        }
    }

    public static void main(String[] args) {
        GraphTraversal graph = new GraphTraversal(6);

        // Adding edges
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(2, 4);
        graph.addEdge(2, 0);
        graph.addEdge(4,5);
        graph.addEdge(4,3);
        System.out.println("BFS starting from vertex 0:");
        graph.bfs(0);
    }
}

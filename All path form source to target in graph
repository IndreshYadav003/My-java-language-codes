package graph.java;
import graph.allpathfornsourcetotarget;

import java.util.*;
public class sourcetotarget {

    static class Edge {
        int src;
        int dest;

        public Edge(int src, int dest) {
            this.src = src;
            this.dest = dest;
        }
    }

    public static void creategraph(ArrayList<Edge> graph[]) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<Edge>();
        }
        graph[0].add(new Edge(0, 1));
        graph[0].add(new Edge(0, 2));

        graph[1].add(new Edge(1, 0));
        graph[1].add(new Edge(1, 3));

        graph[2].add(new Edge(2, 0));
        graph[2].add(new Edge(2, 4));

        graph[3].add(new Edge(3, 1));
        graph[3].add(new Edge (3, 4));
        graph[3].add(new Edge(3, 5));

        graph[4].add(new Edge(4, 2));
        graph[4].add(new Edge(4, 3));
        graph[4].add(new Edge(4, 5));

        graph[5].add(new Edge(5, 3));
        graph[5].add(new Edge(5, 4));
        graph[5].add(new Edge(5, 6));

        graph[6].add(new Edge(6, 5));
    }
    public  static  void  printallPath(ArrayList<Edge>graph[], boolean vis[], int curr, String path, int tar){
        if(curr==tar){
            System.out.println(path);
            return;
        }
        // Mark the current node as visited before exploring its neighbors
        for(int i=0;i<graph[curr].size();i++){
            Edge e=graph[curr].get(i);
            if (!vis[e.dest]){
                vis[curr] = true;
                printallPath(graph, vis, e.dest,path+e.dest, tar);
                vis[curr]=false;
            }
        }
    }


    public static void main(String[] args) {
        int v=7;
        ArrayList<Edge>graph[]=new ArrayList[v];
        creategraph(graph);
        int src=0,tar=5;
        printallPath(graph,new boolean[v],src,"0",tar);

    }

}

package graph;
import java.util.*;
public class articulationPoint {
    static class Edge {
        int src;
        int dest;

        public Edge(int src, int dest) {
            this.src = src;
            this.dest = dest;
        }
    }
    public static void creategraph(ArrayList<Edge>[] graph) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<Edge>();
        }
        graph[0].add(new Edge(0, 1));
        graph[0].add(new Edge(0, 2));
        graph[0].add(new Edge(0, 3));

        graph[1].add(new Edge(1, 0));  // Corrected: Reversed source and destination
        graph[1].add(new Edge(1, 2));

        graph[2].add(new Edge(2, 0));  // Corrected: Reversed source and destination
        graph[2].add(new Edge(2, 1));

        graph[3].add(new Edge(3, 0));  // Corrected: Reversed source and destination
        graph[3].add(new Edge(3, 4));

        graph[4].add(new Edge(4, 3));
    }


    public static void dfs(ArrayList<Edge>[] graph, int curr, int par, int[] dt, int[] low, boolean[] visit, int time, boolean[] ap) {
        visit[curr] = true;
        dt[curr] = low[curr] = ++time;
        int children = 0;
        for (int i = 0; i < graph[curr].size(); i++) {
            Edge e = graph[curr].get(i);
            int neigh = e.dest;
            if (par == neigh) {
                continue;
            }
            else if (visit[neigh]) {
                low[curr] = Math.min(low[curr], dt[neigh]);
            } else {
                dfs(graph, neigh, curr, dt, low, visit, time, ap);
                low[curr] = Math.min(low[curr], low[neigh]);

                if (dt[curr] <= low[neigh] && par != -1) {

                    ap[curr] = true;
                }
                children++;
            }
        }
        if (par == -1 && children > 1) {
            ap[curr] = true;
        }
    }
public  static void  getAp(ArrayList<Edge>[]graph,int v){
        int []dt=new int[v];
        int []low=new int[v];
        int time=0;
        boolean []visit=new boolean[v];
        boolean []ap=new boolean[v];
        for(int i=0;i<v;i++){
            if(!visit[i]){
                dfs(graph,i,-1,dt,low,visit,time,ap);
            }
        }
        for (int i=0;i<v;i++){
            if(ap[i]){
                System.out.println("AP:" +i);
            }
        }
}
    public static void main(String[] args) {
        int v=5;
        ArrayList<Edge>[]graph=new ArrayList[v];
        creategraph(graph);
        getAp(graph,v);
    }
}
//output of code
// AP:0
//AP:3

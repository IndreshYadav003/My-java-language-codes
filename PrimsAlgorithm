package graph;
import  java.util.*;
public class primsAlgorithm {
    // create class in which edge with weight;
    private static class Edge{
        int src;
        int dest;
        int wt;
        private    Edge (int s,int d,int w){
            this.src=s;
            this.dest=d;
            this.wt=w;
        }
    }
    //create graph
    private   static void createGraph(ArrayList<Edge>graph[]){
        for(int i=0;i< graph.length;i++){
            graph[i]=new ArrayList<Edge>();
        }
        graph[0].add(new Edge(0,1,10));
        graph[0].add(new Edge(0,2,15));
        graph[0].add(new Edge(0,3,30));

        graph[1].add(new Edge(1,0,10));
        graph[1].add(new Edge(1,3,41));

        graph[2].add(new Edge(2,0,15));
        graph[2].add(new Edge(2,3,50));

        graph[3].add(new Edge(3,1,40));
        graph[3].add(new Edge(3,2,50));
    }
    //create pair in form of dest and cost means wt
    private static class Pair implements  Comparable<Pair>{
        int node;
        int cost;
        private Pair(int n,int c){
            this.node=n;
            this.cost=c;
        }
        @Override
        public int compareTo(Pair p2){
            return this.cost-p2.cost;//assending order
        }
    }
// Prim's Algorithm
    private  static void primsAlgorithm(ArrayList<Edge>graph[],int v){
        PriorityQueue<Pair>pq=new PriorityQueue<>();
        boolean visit[]=new boolean[v];
        pq.add(new Pair(0,0));
        int mstcost=0;
        while (!pq.isEmpty()){
            Pair curr=pq.remove();
            if(!visit[curr.node]){
                visit[curr.node]=true;
                mstcost+=curr.cost;
                for(int i=0;i<graph[curr.node].size();i++){
                    Edge e=graph[curr.node].get(i);
                    if(!visit[e.dest]){
                        pq.add(new Pair(e.dest, e.wt));
                    }
                }
            }
        }
        System.out.println("Minmum cost of mst="+mstcost);
    }
    public static void main(String[] args) {
int v=4;
ArrayList<Edge>graph[]=new ArrayList[v];
createGraph(graph);
primsAlgorithm(graph,v);
        System.out.println();

    }
}

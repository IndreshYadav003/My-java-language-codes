package binarytree;
import java.util.*;
public class implementationbinarytree {
    static class Node{
        int data;
        Node left;
        Node rigth;
        Node(int data){
            this.data=data;
            this.left=null;
            this.rigth=null;
        }
    }
    static  class binarytree{
        static int idx=-1;
        public static Node buildTree(int nodes[]){
            idx++;
            if(nodes[idx]==-1){
                return  null;
            }
            Node newnode= new Node(nodes[idx]);
            newnode.left=buildTree(nodes);
            newnode.rigth=buildTree(nodes);
            return newnode;
        }
    }
    //Preorder Traversal 1 root 2 ,left subtree, 3 right subtree
    public static void preorder(Node root){
        if(root==null){
            return;
        }
        System.out.print(root.data+" ");
        preorder(root.left);
        preorder(root.rigth);
    }
    //Inorder Traversal 1 left subtree 2 root 3 right subtree 4 2 5 1 3 6
    public static void inorder(Node root){
        if(root==null){
            return;
        }
        inorder(root.left);
        System.out.print(root.data+" ");
        inorder(root.rigth);
    }
    // Postorder Traversal 1left subtree 2 Right subtree 3 root
    public static void postorder(Node root){
        if(root==null){
            return;
        }
        postorder(root.left);
        postorder(root.rigth);
        System.out.print(root.data+" ");
    }
    // Level order Traversal 1 23 456
    // Using queue
    public static void levelorder(Node root){
        if (root==null)return;
        Queue<Node>q=new LinkedList<>();
        q.add(root);
        q.add(null);
        while (!q.isEmpty()){
            Node currNode=q.remove();
            if(currNode==null){
                System.out.println();
                if(q.isEmpty()){
                    break;
            }else {
                    q.add(null);
                }
            }else {
                    System.out.print(currNode .data+" ");
                    if(currNode.left!=null){
                        q.add(currNode.left);
                    }
                    if(currNode.rigth!=null){
                        if(currNode.rigth!=null){
                            q.add(currNode.rigth);
                        }}}}}
    public static void main(String[] args) {
        int nodes[]={1,2,4,-1,-1,5,-1,-1,3,-1,6,-1,-1};
        binarytree tree=new binarytree();
        System.out.println("create tree node");
        Node root=tree.buildTree(nodes);
        System.out.println(root.data);
        //call preordr function
        System.out.println("tree print preorder");
        preorder(root);
        // call inorder function
        System.out.println();
        System.out.println("tree print inorder");
        inorder(root);
        System.out.println();
        // call postorder  function
        System.out.println("tree print postorder");
        postorder(root);
        System.out.println();
        //call level order function
        System.out.println("tree print levelorder");
        levelorder(root);
    }
}
  //  create tree node
     //   1
    //    tree print preorder
      //  1 2 4 5 3 6
       // tree print inorder
        //4 2 5 1 3 6
       // tree print postorder
       // 4 5 2 6 3 1
       // tree print levelorder
        //1
        ///2 3
       /// 4 5 6
